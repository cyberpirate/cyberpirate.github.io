<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Big Data Management on Joe&#39;s Portfolio</title>
    <link>http://www.joei.tech/tags/big-data-management/</link>
    <description>Recent content in Big Data Management on Joe&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>joe.v.iacoviello@gmail.com (Joseph Iacoviello)</managingEditor>
    <webMaster>joe.v.iacoviello@gmail.com (Joseph Iacoviello)</webMaster>
    <lastBuildDate>Sun, 12 Mar 2017 12:36:27 -0400</lastBuildDate>
    
	<atom:link href="http://www.joei.tech/tags/big-data-management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DataStore</title>
      <link>http://www.joei.tech/post/datastore/</link>
      <pubDate>Sun, 12 Mar 2017 12:36:27 -0400</pubDate>
      <author>joe.v.iacoviello@gmail.com (Joseph Iacoviello)</author>
      <guid>http://www.joei.tech/post/datastore/</guid>
      <description>Goal DataStore is designed to store many small files with metadata attached to each file. This metadata could be searched later to download the files that fit the search query.
Implementation DataStore is written using php for processing. MySQL is used to store and search the metadata and Apache is used to serve the uploaded files.
Completed  Uploading Files Searching metadata Downloading Files  Future goals  Auto setup for database tables Auto backup for metadata  Source Code</description>
    </item>
    
    <item>
      <title>DataStoreLib.py</title>
      <link>http://www.joei.tech/post/datastorelib.py/</link>
      <pubDate>Sun, 12 Mar 2017 12:36:27 -0400</pubDate>
      <author>joe.v.iacoviello@gmail.com (Joseph Iacoviello)</author>
      <guid>http://www.joei.tech/post/datastorelib.py/</guid>
      <description>Goal DataStoreLib.py is a python SDK designed to access the DataStore API.
Implementation DataStoreLib.py simplifies the DataStore API into two python functions
#file: file to be passed to requests #mimeType: string mimeType #data: dictionary of metadata for the file DataStore.uploadFile(file, mimeType, data) #returns: True or False #conditions: array of conditions to pass to DataStore. # Syntax in the DataStore documentation DataStore.getIds(conditions) #returns: array of urls to files passing the conditions  Completed  Uploading Files Searching metadata  Future goals None yet</description>
    </item>
    
  </channel>
</rss>